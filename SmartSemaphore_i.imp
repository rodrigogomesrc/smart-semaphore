/* SmartSemaphore_i
 * Author: Rodrigo
 * Creation date: 04/07/2025
 */

IMPLEMENTATION SmartSemaphore_i
      
REFINES SmartSemaphore
      
SEES SmartSemaphore_ctx
      
CONCRETE_CONSTANTS
  direction_enum,
  time_enum, 
  color_enum,
  semaphore_enum
  
PROPERTIES
      
  direction_enum : 0..3 --> DIRECTION &
  time_enum : 0..3 --> STATE &
  color_enum : 0..2 --> COLOR &
  semaphore_enum : 0..11 --> SEMAPHORE

VALUES
      
  direction_enum = {0 |-> NORTH, 1 |-> SOUTH, 2 |-> EAST, 3 |-> WEST};
  time_enum = {0 |-> NS, 1 |-> LO, 2 |-> DNS, 3 |-> DLO};
  color_enum = {0 |-> GREEN, 1 |-> YELLOW, 2 |-> RED};
  semaphore_enum = {
	      0 |-> NS_L, 1 |-> NS_A, 2 |-> NS_R,
	      3 |-> SN_L, 4 |-> SN_A, 5 |-> SN_R,
	      6 |-> LO_L, 7 |-> LO_A, 8 |-> LO_R,
          9 |-> OL_L, 10 |-> OL_A, 11 |-> OL_R
     }
  
CONCRETE_VARIABLES
      
  cars_i,
  time_i,
  semaphores_i,
  has_priority,
  priority,
  timer,
  yellow_timer
  
INVARIANT

  cars_i : 0..3 --> 0..max_cars &
  cars = (direction_enum~ ; cars_i) &
  
  time_i : 0..3 --> 0..max_time &
  time = (time_enum~;time_i) &
  
  semaphores_i : 0..11 --> 0..2 &
  semaphores = (semaphore_enum~; semaphores_i; color_enum)
      
INITIALISATION
    BEGIN
       cars_i := (0..3) * {0};
       time_i := (0..3) * {max_time};
       semaphores_i := (0..11) * {2}; // Todos vermelhos
       semaphores_i(7) := 0; //  LO_A como verde
       semaphores_i(10) := 0; // OL_A como verde
       has_priority := FALSE;
       priority := NS;
       timer := max_time;
       yellow_timer := yellow_time
    END
  
OPERATIONS
    prioritize (ss) =
        BEGIN
            has_priority := TRUE;
            priority := ss;
            timer := max_time
        END;

   calculate_times = 
       skip;

   addCars(nn,dd) = 
        BEGIN
              IF dd = NORTH THEN
                 cars_i(0) := cars_i(0) + nn
              ELSIF dd = SOUTH THEN
                 cars_i(1) := cars_i(1) + nn
              ELSIF dd = EAST THEN
                 cars_i(2) := cars_i(2) + nn
              ELSE
                 cars_i(3) := cars_i(3) + nn
              END
              
        END;


    st, yt <-- process_semaphore =
        skip;


     st, yt <-- process_semaphore_priority =
       skip;

 
     ll, aa, rr <-- status_semaphoreNS = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(0);
              aa_c := semaphores_i(1);
              rr_c := semaphores_i(2);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

    
     ll, aa, rr <-- status_semaphoreSN = 
        BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(3);
              aa_c := semaphores_i(4);
              rr_c := semaphores_i(5);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

    
     ll, aa, rr <-- status_semaphoreLO = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(6);
              aa_c := semaphores_i(7);
              rr_c := semaphores_i(8);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

     ll, aa, rr <-- status_semaphoreOL = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(9);
              aa_c := semaphores_i(10);
              rr_c := semaphores_i(11);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END
 END