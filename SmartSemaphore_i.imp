/* SmartSemaphore_i
 * Author: Rodrigo
 * Creation date: 04/07/2025
 */

IMPLEMENTATION SmartSemaphore_i
      
REFINES SmartSemaphore
      
SEES 
      SmartSemaphore_ctx
      
IMPORTS 
      Priority
      
CONCRETE_CONSTANTS
  direction_enum,
  time_enum, 
  color_enum,
  semaphore_enum
  
PROPERTIES
      
  direction_enum : 0..3 --> DIRECTION &
  time_enum : 0..3 --> STATE &
  color_enum : 0..2 --> COLOR &
  semaphore_enum : 0..11 --> SEMAPHORE

VALUES
      
  direction_enum = {0 |-> NORTH, 1 |-> SOUTH, 2 |-> EAST, 3 |-> WEST};
  time_enum = {0 |-> NS, 1 |-> LO, 2 |-> DNS, 3 |-> DLO};
  color_enum = {0 |-> GREEN, 1 |-> YELLOW, 2 |-> RED};
  semaphore_enum = {
	      0 |-> NS_L, 1 |-> NS_A, 2 |-> NS_R,
	      3 |-> SN_L, 4 |-> SN_A, 5 |-> SN_R,
	      6 |-> LO_L, 7 |-> LO_A, 8 |-> LO_R,
          9 |-> OL_L, 10 |-> OL_A, 11 |-> OL_R
     }
  
CONCRETE_VARIABLES
      
  cars_i,
  time_i,
  semaphores_i,
  has_priority,
  priority,
  timer,
  yellow_timer,
  priority_phase
  
INVARIANT

  cars_i : 0..3 --> 0..max_cars &
  cars = (direction_enum~ ; cars_i) &
  
  time_i : 0..3 --> 0..max_time &
  time = (time_enum~;time_i) &
  
  semaphores_i : 0..11 --> 0..2 &
  semaphores = (semaphore_enum~; semaphores_i; color_enum)
      
INITIALISATION
    BEGIN
       cars_i := (0..3) * {0};
       time_i := (0..3) * {max_time};
       semaphores_i := (0..11) * {2}; // Todos vermelhos
       semaphores_i(7) := 0; //  LO_A como verde
       semaphores_i(10) := 0; // OL_A como verde
       has_priority := FALSE;
       priority := NS;
       timer := max_time;
       yellow_timer := yellow_time;
       priority_phase := TRANSITIONING
    END
  
OPERATIONS
    prioritize (ss) =
        BEGIN
            has_priority := TRUE;
            priority := ss;
            timer := max_time
        END;
    
   status <-- pre_op_prioritize(ss) =
      BEGIN
         VAR cc IN
            cc <-- current;
            status := bool(has_priority = FALSE & cc /= ss)   
         END
        
      END;

   calculate_times =
    BEGIN
        VAR sumNS, sumLO, max_denominator, timeNS, timeLO, timeDNS, timeDLO IN
            sumNS := cars_i(0) + cars_i(1); // NORTH + SOUTH
            sumLO := cars_i(2) + cars_i(3); // EAST + WEST

            IF sumNS > sumLO THEN
                max_denominator := sumNS
            ELSE
                max_denominator := sumLO
            END;

          
            IF max_denominator /= 0 THEN 
               
                VAR tempTimeNS_DNS IN
                    tempTimeNS_DNS := (sumNS * max_time) / max_denominator;
                    
                    IF tempTimeNS_DNS > min_time THEN
                        timeNS := tempTimeNS_DNS;
                        timeDNS := tempTimeNS_DNS
                    ELSE
                        timeNS := min_time;
                        timeDNS := min_time
                    END
                END;

             
                VAR tempTimeLO_DLO IN
                    tempTimeLO_DLO := (sumLO * max_time) / max_denominator;
     
                    IF tempTimeLO_DLO > min_time THEN
                        timeLO := tempTimeLO_DLO;
                        timeDLO := tempTimeLO_DLO
                    ELSE
                        timeLO := min_time;
                        timeDLO := min_time
                    END
                END
            ELSE
                // Caso o max_denominator seja 0
                timeNS := min_time;
                timeDNS := min_time;
                timeLO := min_time;
                timeDLO := min_time
            END;

          
            time_i(0) := timeNS;
            time_i(1) := timeLO; 
            time_i(2) := timeDNS;
            time_i(3) := timeDLO; 
            cars_i(0) := 0; 
            cars_i(1) := 0; 
            cars_i(2) := 0;
            cars_i(3) := 0 
        END
    END;
    
    status <-- pre_calculate_times =
      BEGIN
            status := TRUE
      END;

   addCars(nn,dd) = 
        BEGIN
              IF dd = NORTH THEN
                 cars_i(0) := cars_i(0) + nn
              ELSIF dd = SOUTH THEN
                 cars_i(1) := cars_i(1) + nn
              ELSIF dd = EAST THEN
                 cars_i(2) := cars_i(2) + nn
              ELSE
                 cars_i(3) := cars_i(3) + nn
              END
        END;
        
    status <-- pre_op_addCars(nn,dd) =
       BEGIN
             VAR ii, jj IN
                   
                   IF dd = NORTH THEN
                       ii := cars_i(0)
                    ELSIF dd = SOUTH THEN
                        ii := cars_i(1)
                    ELSIF dd = EAST THEN
                        ii := cars_i(2)
                    ELSE
                        ii := cars_i(3)
                    END;
                    jj := ii + nn;
                    status := bool(jj < max_cars)
              END
       END;


    st, yt <-- process_semaphore =
        BEGIN
            IF timer > 0 THEN 
                timer := timer - 1; 
                st := timer;
                yt := yellow_timer
            ELSIF (timer = 0 & yellow_timer > 0) THEN
                VAR current_state IN
                    current_state <-- current; 
                    IF current_state = LO THEN
                        semaphores_i := (0..11) * {2}; 
                        semaphores_i(7) := 1; semaphores_i(10) := 1
                    ELSIF current_state = DNS THEN
                        semaphores_i := (0..11) * {2};
                        semaphores_i(3) := 1; semaphores_i(5) := 1; semaphores_i(0) := 1;
                        semaphores_i(2) := 1; semaphores_i(11) := 1; semaphores_i(8) := 1
                    ELSIF current_state = DLO THEN
                        semaphores_i := (0..11) * {2};
                        semaphores_i(5) := 1; semaphores_i(2) := 1; semaphores_i(11) := 1;
                        semaphores_i(9) := 1; semaphores_i(8) := 1; semaphores_i(6) := 1
                    ELSE
                        semaphores_i := (0..11) * {2};
                        semaphores_i(1) := 1; semaphores_i(4) := 1
                    END ;
                    yellow_timer := yellow_timer - 1;
                    st := timer;
                    yt := yellow_timer
                END
            ELSE
                VAR next_state, ss IN
                    ss <-- advance; 
                    next_state <-- current; 
                    
                    IF next_state = NS THEN timer := time_i(0)
                    ELSIF next_state = LO THEN timer := time_i(1)
                    ELSIF next_state = DNS THEN timer := time_i(2)
                    ELSE timer := time_i(3) END;
                    
                    IF next_state = LO THEN
                        semaphores_i := (0..11) * {2};
                        semaphores_i(7) := 0; semaphores_i(10) := 0
                    ELSIF next_state = DNS THEN
                        semaphores_i := (0..11) * {2};
                        semaphores_i(3) := 0; semaphores_i(5) := 0; semaphores_i(0) := 0;
                        semaphores_i(2) := 0; semaphores_i(11) := 0; semaphores_i(8) := 0
                    ELSIF next_state = DLO THEN
                        semaphores_i := (0..11) * {2};
                        semaphores_i(5) := 0; semaphores_i(2) := 0; semaphores_i(11) := 0;
                        semaphores_i(9) := 0; semaphores_i(8) := 0; semaphores_i(6) := 0
                    ELSE
                        semaphores_i := (0..11) * {2};
                        semaphores_i(1) := 0; semaphores_i(4) := 0
                    END;
                    yellow_timer := yellow_time;
                    yt := yellow_timer;
                    st := timer
                END
            END
        END;
        
     status <-- pre_op_process_semaphore =
       BEGIN
             status := bool(has_priority = FALSE)
       END;

     st, yt <-- process_semaphore_priority =
     BEGIN
         IF priority_phase = TRANSITIONING THEN
             IF yellow_timer > 1 THEN
                 yellow_timer := yellow_timer - 1;
                 st := timer;
                 yt := yellow_timer;
                 IF yellow_timer = yellow_time THEN 
                   semaphores_i := (0..11) * {2}; 
                   VAR current_order_state IN 
                       current_order_state <-- current; 
                       IF current_order_state = LO THEN
                          semaphores_i(7) := 1; semaphores_i(10) := 1 
                       ELSIF current_order_state = DNS THEN
                          semaphores_i(3) := 1; semaphores_i(5) := 1; semaphores_i(0) := 1;
                          semaphores_i(2) := 1; semaphores_i(11) := 1; semaphores_i(8) := 1
                       ELSIF current_order_state = DLO THEN
                          semaphores_i(5) := 1; semaphores_i(2) := 1; semaphores_i(11) := 1;
                          semaphores_i(9) := 1; semaphores_i(8) := 1; semaphores_i(6) := 1
                       ELSE
                          semaphores_i(1) := 1; semaphores_i(4) := 1
                       END
                   END
                 END
             ELSE
                 priority_phase := ACTIVE;
                 yellow_timer := yellow_time;
                 st := timer;
                 yt := yellow_timer
             END
         ELSIF priority_phase = ACTIVE THEN
             IF timer > 1 THEN
                 timer := timer - 1;
                 st := timer - 1;
                 yt := 0;
                 IF timer = max_time THEN 
                   semaphores_i := (0..11) * {2}; 
                   IF priority = LO THEN 
                          semaphores_i(7) := 0; semaphores_i(10) := 0 
                   ELSIF priority = DNS THEN
                          semaphores_i(3) := 0; semaphores_i(5) := 0; semaphores_i(0) := 0;
                          semaphores_i(2) := 0; semaphores_i(11) := 0; semaphores_i(8) := 0
                   ELSIF priority = DLO THEN
                          semaphores_i(5) := 0; semaphores_i(2) := 0; semaphores_i(11) := 0;
                          semaphores_i(9) := 0; semaphores_i(8) := 0; semaphores_i(6) := 0
                   ELSE 
                          semaphores_i(1) := 0; semaphores_i(4) := 0
                   END
                 END
             ELSE 
                 priority_phase := EXITING;
                 timer := 0;
                 st := 0;
                 yt := 0
             END
         ELSIF priority_phase = EXITING THEN
             IF yellow_timer > 1 THEN
                 yellow_timer := yellow_timer - 1;
                 st := 0;
                 yt := yellow_timer - 1;
                 IF yellow_timer = yellow_time THEN 
                   semaphores_i := (0..11) * {2};
                   IF priority = LO THEN 
                          semaphores_i(7) := 1; semaphores_i(10) := 1
                   ELSIF priority = DNS THEN
                          semaphores_i(3) := 1; semaphores_i(5) := 1; semaphores_i(0) := 1;
                          semaphores_i(2) := 1; semaphores_i(11) := 1; semaphores_i(8) := 1
                   ELSIF priority = DLO THEN
                          semaphores_i(5) := 1; semaphores_i(2) := 1; semaphores_i(11) := 1;
                          semaphores_i(9) := 1; semaphores_i(8) := 1; semaphores_i(6) := 1
                   ELSE 
                          semaphores_i(1) := 1; semaphores_i(4) := 1
                   END
                 END
             ELSE 
                 has_priority := FALSE;
                 VAR current_state IN
                     current_state <-- current;
                     
                     IF current_state = NS THEN timer := time_i(0)
                     ELSIF current_state = LO THEN timer := time_i(1)
                     ELSIF current_state = DNS THEN timer := time_i(2)
                     ELSE timer := time_i(3) END
                     
                 END;
                 yellow_timer := yellow_time;
                 VAR current_state IN
                     current_state <-- current; 
                     semaphores_i := (0..11) * {2};
                     IF current_state = LO THEN
                         semaphores_i(7) := 0; semaphores_i(10) := 0
                     ELSIF current_state = DNS THEN
                         semaphores_i(3) := 0; semaphores_i(5) := 0; semaphores_i(0) := 0;
                         semaphores_i(2) := 0; semaphores_i(11) := 0; semaphores_i(8) := 0
                     ELSIF current_state = DLO THEN
                         semaphores_i(5) := 0; semaphores_i(2) := 0; semaphores_i(11) := 0;
                         semaphores_i(9) := 0; semaphores_i(8) := 0; semaphores_i(6) := 0
                     ELSE 
                         semaphores_i(1) := 0; semaphores_i(4) := 0
                     END
                 END;
                 st := timer; 
                 yt := yellow_timer
             END
         END
     END;
     
     status <-- pre_op_process_semaphore_priority =
       BEGIN
            status := has_priority
       END;

 
     ll, aa, rr <-- status_semaphoreNS = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(0);
              aa_c := semaphores_i(1);
              rr_c := semaphores_i(2);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

    
     ll, aa, rr <-- status_semaphoreSN = 
        BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(3);
              aa_c := semaphores_i(4);
              rr_c := semaphores_i(5);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

    
     ll, aa, rr <-- status_semaphoreLO = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(6);
              aa_c := semaphores_i(7);
              rr_c := semaphores_i(8);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END;

     ll, aa, rr <-- status_semaphoreOL = 
       BEGIN
          VAR ll_c, aa_c, rr_c IN 
              ll_c := semaphores_i(9);
              aa_c := semaphores_i(10);
              rr_c := semaphores_i(11);
              
              ll := color_enum(ll_c);
              aa := color_enum(aa_c);
              rr := color_enum(rr_c)
          END
       END
 
 END